name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  APP_NAME: TWBM

# ==================================================================================
#  Concurrency: Ensures only one release workflow runs at a time for a given tag.
# ==================================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  #  Build Jobs: Compile the application for each platform.
  # ==================================================================================
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    runs-on: macos-14
    strategy:
      matrix:
        include:
          - arch: aarch64
            target: aarch64-apple-darwin
          - arch: x86_64
            target: x86_64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install Rust toolchain with target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build macOS binary
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload macOS binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/tiny-wii-backup-manager

  bundle-macos:
    name: Create Universal macOS App and DMG
    runs-on: macos-14
    needs: build-macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-bundle-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bundle-

      - name: Download macOS binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine binaries into Universal2
        run: |
          mkdir -p target/universal-apple-darwin/release
          lipo -create -output target/universal-apple-darwin/release/tiny-wii-backup-manager \
            artifacts/macos-binary-x86_64/tiny-wii-backup-manager \
            artifacts/macos-binary-aarch64/tiny-wii-backup-manager
          chmod +x target/universal-apple-darwin/release/tiny-wii-backup-manager

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0" --locked

      - name: Bundle Universal2 macOS App into DMG
        run: |
          cargo tauri bundle --bundles dmg --target universal-apple-darwin
          mv target/universal-apple-darwin/release/bundle/dmg/*.dmg ${{ env.APP_NAME }}-${{ github.ref_name }}-MacOS-Universal2.dmg

      - name: Upload macOS DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal2-dmg
          path: ${{ env.APP_NAME }}-${{ github.ref_name }}-MacOS-Universal2.dmg

  build-linux:
    name: Build for Linux (${{ matrix.arch }}) with Tauri Bundler
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0" --locked

      - name: Install Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y squashfs-tools libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build Linux AppImage and Tarball
        run: |
          cargo build --release
          cargo tauri bundle --bundles appimage
          mv target/release/bundle/appimage/*.AppImage ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}.AppImage
          cp target/release/tiny-wii-backup-manager "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}"
          tar -czvf "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}.tar.gz" \
            "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          path: |
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}.AppImage
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-${{ matrix.arch }}.tar.gz

  build-windows:
    name: Build for Windows (${{ matrix.arch }}) with Tauri Bundler
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: windows-2022
          - arch: aarch64
            runner: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0" --locked

      - name: Build Windows Artifacts
        run: |
          cargo build --release
          Copy-Item -Path "target/release/tiny-wii-backup-manager.exe" -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.exe"
          Compress-Archive -Path "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.exe" -DestinationPath "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.zip"
          cargo tauri bundle --bundles msi
          Move-Item -Path target/release/bundle/msi/*.msi -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.msi"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-artifacts
          path: |
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.zip
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-${{ matrix.arch }}.msi

  # ==================================================================================
  #  Release Job: Collects all build artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [bundle-macos, build-linux, build-windows]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.msi
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}