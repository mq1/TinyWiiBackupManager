name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Set up mold
        uses: rui314/setup-mold@v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          
          # Install dependencies for eframe
          sudo apt-get install -y \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

          # Install cargo-packager
          cargo install --locked cargo-packager

      - name: Build and package binary
        run: |
          cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}
          cargo packager --release --target ${{ env.TARGET_TRIPLE }} --format appimage

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist-${{ matrix.arch }}
          path: dist/*

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
          - arch: aarch64
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Install dependencies
        run: cargo install --locked cargo-packager

      - name: Build and package binary
        run: |
          cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}
          cargo packager --release --target ${{ env.TARGET_TRIPLE }} --format nsis

      - name: Distribute also a portable zip
        shell: pwsh
        run: |
          $APP_NAME = (Get-ChildItem dist/*.exe | Select-Object -First 1).BaseName
          Move-Item -Path "target/${{ env.TARGET_TRIPLE }}/release/tiny-wii-backup-manager.exe" -Destination "${APP_NAME}.exe"
          Compress-Archive -Path "${APP_NAME}.exe" -DestinationPath "dist/${APP_NAME}_WindowsPortable.zip"

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist-${{ matrix.arch }}
          path: dist/*

  build-macos:
    name: Build for MacOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
          - arch: x86_64
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Build binary
        run: cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}

      - name: Upload MacOS binary
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary-${{ matrix.arch }}
          path: target/${{ env.TARGET_TRIPLE }}/release/tiny-wii-backup-manager

  package-macos:
    name: Package MacOS Universal2
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install dependencies
        run: cargo install --locked cargo-packager

      - name: Download MacOS binaries
        uses: actions/download-artifact@v4
        with:
          pattern: 'macos-binary-*'

      - name: Create Universal2 app and DMG
        run: |
          mkdir -p target/universal2-apple-darwin/release
          
          # Create the universal binary using lipo
          lipo \
            -create \
            -output target/universal2-apple-darwin/release/tiny-wii-backup-manager \
            macos-binary-aarch64/tiny-wii-backup-manager \
            macos-binary-x86_64/tiny-wii-backup-manager
          
          # Set correct binary permissions
          chmod 755 target/universal2-apple-darwin/release/tiny-wii-backup-manager
          
          # Create DMG with cargo-packager
          cargo packager --release --target universal2-apple-darwin

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, package-macos ]
    steps:
      - name: Download distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*dist*' # This pattern will match all final distributable artifacts
          merge-multiple: true # This places all matching artifacts into a single 'artifacts' directory

      - name: Create version.txt
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
            version.txt
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}