name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  APP_NAME: TWBM

# ==================================================================================
#  Concurrency: Ensures only one release workflow runs at a time for a given tag.
# ==================================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  #  Build Jobs: Compile the application for each platform.
  # ==================================================================================
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    runs-on: macos-14
    strategy:
      matrix:
        include:
          - arch: aarch64
            target: aarch64-apple-darwin
          - arch: x86_64
            target: x86_64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build macOS binary
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --release

      - name: Upload macOS binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/tiny-wii-backup-manager

  build-linux:
    name: Build for Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build Linux binary
        run: cargo build --release

      - name: Upload Linux binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary-${{ matrix.arch }}
          path: target/release/tiny-wii-backup-manager

  build-windows:
    name: Build for Windows (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: windows-2022
          - arch: aarch64
            runner: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Windows binary
        run: cargo build --release

      - name: Upload Windows binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary-${{ matrix.arch }}
          path: target/release/tiny-wii-backup-manager.exe

  # ==================================================================================
  #  Bundle Jobs: Create distributable packages from the built binaries.
  # ==================================================================================
  bundle-macos:
    name: Create Universal2 MacOS DMG
    runs-on: macos-14
    needs: build-macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine binaries into Universal2
        run: |
          mkdir -p target/universal-apple-darwin/release
          lipo -create -output target/universal-apple-darwin/release/tiny-wii-backup-manager \
            artifacts/macos-binary-x86_64/tiny-wii-backup-manager \
            artifacts/macos-binary-aarch64/tiny-wii-backup-manager
          chmod +x target/universal-apple-darwin/release/tiny-wii-backup-manager

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Tauri CLI
        run: cargo binstall tauri-cli --version "^2.0.0" --locked

      - name: Bundle Universal2 macOS App into DMG
        run: |
          cargo tauri bundle --bundles dmg --target universal-apple-darwin
          mv target/universal-apple-darwin/release/bundle/dmg/*.dmg ${{ env.APP_NAME }}-${{ github.ref_name }}-MacOS-Universal2.dmg

      - name: Upload macOS DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal2-dmg
          path: ${{ env.APP_NAME }}-${{ github.ref_name }}-MacOS-Universal2.dmg

  bundle-linux:
    name: Bundle for Linux (x86_64 & aarch64)
    runs-on: ubuntu-22.04
    needs: build-linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Tauri Bundler dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Tauri CLI
        run: cargo binstall tauri-cli --version "^2.0.0" --locked

      - name: Download all Linux binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/linux

      - name: Bundle Linux AppImages and Tarballs
        run: |
          # Bundle x86_64
          mkdir -p target/x86_64-unknown-linux-gnu/release
          cp artifacts/linux/linux-binary-x86_64/tiny-wii-backup-manager target/x86_64-unknown-linux-gnu/release/
          cargo tauri bundle --bundles appimage --target x86_64-unknown-linux-gnu
          mv target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64.AppImage
          cp target/x86_64-unknown-linux-gnu/release/tiny-wii-backup-manager "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64"
          tar -czvf "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64.tar.gz" "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64"

          # Bundle aarch64
          mkdir -p target/aarch64-unknown-linux-gnu/release
          cp artifacts/linux/linux-binary-aarch64/tiny-wii-backup-manager target/aarch64-unknown-linux-gnu/release/
          cargo tauri bundle --bundles appimage --target aarch64-unknown-linux-gnu
          mv target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64.AppImage
          cp target/aarch64-unknown-linux-gnu/release/tiny-wii-backup-manager "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64"
          tar -czvf "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64.tar.gz" "${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64"

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64.AppImage
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-x86_64.tar.gz
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64.AppImage
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Linux-aarch64.tar.gz

  bundle-windows:
    name: Bundle for Windows (x86_64 & aarch64)
    runs-on: windows-2022
    needs: build-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all Windows binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/windows

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Tauri CLI
        run: cargo binstall tauri-cli --version "^2.0.0" --locked

      - name: Bundle Windows Artifacts
        shell: pwsh
        run: |
          # Bundle x86_64
          New-Item -Path "target/x86_64-pc-windows-msvc/release" -ItemType Directory -Force
          Copy-Item -Path "artifacts/windows/windows-binary-x86_64/tiny-wii-backup-manager.exe" -Destination "target/x86_64-pc-windows-msvc/release/"
          cargo tauri bundle --bundles msi --target x86_64-pc-windows-msvc
          Move-Item -Path "target/x86_64-pc-windows-msvc/release/tiny-wii-backup-manager.exe" -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.exe"
          Compress-Archive -Path "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.exe" -DestinationPath "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.zip"
          Move-Item -Path "target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi" -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.msi"

          # Bundle aarch64
          New-Item -Path "target/aarch64-pc-windows-msvc/release" -ItemType Directory -Force
          Copy-Item -Path "artifacts/windows/windows-binary-aarch64/tiny-wii-backup-manager.exe" -Destination "target/aarch64-pc-windows-msvc/release/"
          cargo tauri bundle --bundles msi --target aarch64-pc-windows-msvc
          Move-Item -Path "target/aarch64-pc-windows-msvc/release/tiny-wii-backup-manager.exe" -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.exe"
          Compress-Archive -Path "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.exe" -DestinationPath "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.zip"
          Move-Item -Path "target/aarch64-pc-windows-msvc/release/bundle/msi/*.msi" -Destination "${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.msi"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.zip
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-x86_64.msi
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.zip
            ${{ env.APP_NAME }}-${{ github.ref_name }}-Windows-aarch64.msi

  # ==================================================================================
  #  Release Job: Collects all build artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [bundle-macos, bundle-linux, bundle-windows]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.msi
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}