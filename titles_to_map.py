#!/usr/bin/env python3
#
# /// script
# requires-python = ">=3.12"
# ///
#
# SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
# SPDX-License-Identifier: GPL-2.0-only

import os
import sys

# --- Configuration ---
INPUT_FILENAME = 'titles.txt'
OUTPUT_DIR = 'src'
OUTPUT_FILENAME = 'titles.rs'
# -------------------

def escape_rust_string(value: str) -> str:
    """Escapes a string for use as a Rust string literal."""
    # Escape backslashes first, then double quotes
    return value.replace('\\', '\\\\').replace('"', '\\"')

def generate_rust_from_titles():
    """
    Reads the titles.txt file and generates a Rust source file
    with a phf::Map of the game titles.
    """
    input_path = INPUT_FILENAME
    output_path = os.path.join(OUTPUT_DIR, OUTPUT_FILENAME)

    if not os.path.exists(input_path):
        print(f"Error: Input file '{input_path}' not found.", file=sys.stderr)
        print("Please save the provided data as 'titles.txt' in the current directory.", file=sys.stderr)
        sys.exit(1)

    # Ensure the output directory exists
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    print(f"Reading from '{input_path}'...")
    
    entries = []
    with open(input_path, 'r', encoding='utf-8') as infile:
        for line in infile:
            line = line.strip()
            # Skip empty lines, comments, or the header
            if not line or '=' not in line or line.startswith('---') or line.startswith('TITLES ='):
                continue

            parts = line.split('=', 1)
            if len(parts) != 2:
                continue

            game_id = parts[0].strip()
            game_title = parts[1].strip()

            if game_id and game_title:
                entries.append((game_id, game_title))

    print(f"Found {len(entries)} valid title entries.")

    print(f"Generating Rust code at '{output_path}'...")
    with open(output_path, 'w', encoding='utf-8') as outfile:
        # Write the file header and import statements
        outfile.write("//! This file is automatically generated by a script. Do not edit manually.\n")
        outfile.write("//! Source: GameTDB (https://www.gametdb.com)\n\n")
        outfile.write("use phf::{phf_map, Map};\n\n")

        # Write the static map definition
        outfile.write("/// A comprehensive, compile-time map of Wii and GameCube game IDs to their English titles.\n")
        outfile.write("/// The data is sourced from GameTDB and includes official, homebrew, and prototype titles.\n")
        outfile.write("pub static GAME_TITLES: Map<&'static str, &'static str> = phf_map! {\n")

        # Write each key-value pair
        for game_id, game_title in entries:
            escaped_title = escape_rust_string(game_title)
            outfile.write(f'    "{game_id}" => "{escaped_title}",\n')

        # Close the map definition
        outfile.write("};\n")

    print("\nConversion complete!")
    print(f"Rust source file created at: {output_path}")
    print("\nTo use this in your Rust project, you'll need the `phf` crate.")
    print("Add the following to your `Cargo.toml` file:")
    print('phf = { version = "0.12", features = ["macros"] }')
    print("\nThen, you can include the generated file in your project with `mod titles;`")
    print("And access the map with `titles::GAME_TITLES`.")

if __name__ == '__main__':
    generate_rust_from_titles()
