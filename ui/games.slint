// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { Vertical, Horizontal, Icon, MaterialPalette, FilledIconButton, IconButton, TonalIconButton, Dialog, MaterialText } from "@material";
import { LineEdit } from "std-widgets.slint";
import { Game, Config, ViewAs, SortBy } from "common.slint";
import { GameGrid } from "game_grid.slint";
import { GameList } from "game_list.slint";

export component GamesPage inherits VerticalLayout {
    private property <string> filter: "";
    private property <bool> show_wii: true;
    private property <bool> show_gc: true;
    in-out property <Config> config;
    property <Game> removing_game;

    callback add_games();
    callback update_config();
    callback open_disc_info(Game);
    callback open_game_dir(Game);
    callback archive_game(Game);
    callback trigger_sort(string);
    callback refresh_games();
    callback remove_dir(string);

    pure callback get_games(string, bool, bool) -> [Game];

    top_bar := Rectangle {
        background: MaterialPalette.surface_container;
        z: 2.0;

        Horizontal {
            VerticalLayout {
                padding-left: 4px;
                alignment: center;
                Icon {
                    source: @image-url("../mdi/magnify.svg");
                }
            }

            LineEdit {
                height: 36px;
                placeholder-text: "Search by Title or ID...";
                text <=> filter;
            }

            VerticalLayout {
                alignment: center;

                Rectangle {
                    border-color: MaterialPalette.outline_variant;
                    border-radius: 12px;
                    border-width: 1px;

                    Horizontal {
                        alignment: center;

                        IconButton {
                            checked: show_wii;
                            icon: @image-url("../mdi/tennis.svg");
                            tooltip: "Show Wii";
                            inline: true;
                            clicked => {
                                show_wii = !show_wii;
                            }
                        }

                        IconButton {
                            checked: show_gc;
                            icon: @image-url("../mdi/cube-outline.svg");
                            tooltip: "Show GC";
                            inline: true;
                            clicked => {
                                show_gc = !show_gc;
                            }
                        }
                    }
                }
            }

            VerticalLayout {
                alignment: center;

                Rectangle {
                    border-color: MaterialPalette.outline_variant;
                    border-radius: 12px;
                    border-width: 1px;

                    Horizontal {
                        IconButton {
                            checked: config.sort-by == SortBy.NameAscending || config.sort-by == SortBy.NameDescending;
                            icon: config.sort-by == SortBy.NameAscending || config.sort-by == SortBy.SizeAscending || config.sort-by == SortBy.SizeDescending ? @image-url("../mdi/sort-alphabetical-ascending.svg") : @image-url("../mdi/sort-alphabetical-descending.svg");
                            tooltip: "Sort by Name";
                            inline: true;
                            clicked => {
                                if config.sort-by == SortBy.NameAscending {
                                    config.sort-by = SortBy.NameDescending;
                                } else if config.sort-by == SortBy.NameDescending {
                                    config.sort-by = SortBy.NameAscending;
                                } else if config.sort-by == SortBy.SizeAscending || config.sort-by == SortBy.SizeDescending {
                                    config.sort-by = SortBy.NameAscending;
                                }
                                update_config();
                                trigger_sort(filter);
                            }
                        }

                        IconButton {
                            checked: config.sort-by == SortBy.SizeAscending || config.sort-by == SortBy.SizeDescending;
                            icon: config.sort-by == SortBy.SizeAscending || config.sort-by == SortBy.NameAscending || config.sort-by == SortBy.NameDescending ? @image-url("../mdi/sort-ascending.svg") : @image-url("../mdi/sort-descending.svg");
                            tooltip: "Sort by Size";
                            inline: true;
                            clicked => {
                                if config.sort-by == SortBy.SizeAscending {
                                    config.sort-by = SortBy.SizeDescending;
                                } else if config.sort-by == SortBy.SizeDescending {
                                    config.sort-by = SortBy.SizeAscending;
                                } else if config.sort-by == SortBy.NameAscending || config.sort-by == SortBy.NameDescending {
                                    config.sort-by = SortBy.SizeAscending;
                                }
                                update_config();
                                trigger_sort(filter);
                            }
                        }
                    }
                }
            }

            VerticalLayout {
                alignment: center;

                Rectangle {
                    border-color: MaterialPalette.outline_variant;
                    border-radius: 12px;
                    border-width: 1px;

                    Horizontal {
                        alignment: center;

                        IconButton {
                            checked: config.view-as == ViewAs.Grid;
                            icon: @image-url("../mdi/view-grid.svg");
                            tooltip: "Grid view";
                            inline: true;
                            clicked => {
                                config.view-as = ViewAs.Grid;
                                update_config();
                            }
                        }

                        IconButton {
                            checked: config.view-as == ViewAs.List;
                            icon: @image-url("../mdi/view-list.svg");
                            tooltip: "List view";
                            inline: true;
                            clicked => {
                                config.view-as = ViewAs.List;
                                update_config();
                            }
                        }
                    }
                }
            }

            TonalIconButton {
                height: 36px;
                width: 36px;
                icon: @image-url("../mdi/refresh.svg");
                tooltip: "Refresh";
                clicked => {
                    refresh_games();
                }
            }

            FilledIconButton {
                height: 36px;
                width: 36px;
                icon: @image-url("../mdi/plus.svg");
                tooltip: "Add Games" + "\u{2001}.";
                clicked => {
                    add_games();
                }
            }
        }
    }

    if config.view-as == ViewAs.Grid: GameGrid {
        x: -4px;
        games: get_games(filter.to-lowercase(), show_wii, show_gc);
        archive_format: config.archive_format;
        open_disc_info(game) => open_disc_info(game);
        remove_game(game) => {
            removing_game = game;
            remove_game_dialog.show();
        }
        archive_game(game) => archive_game(game);
    }

    if config.view-as == ViewAs.List: GameList {
        x: -4px;
        games: get_games(filter.to-lowercase(), show_wii, show_gc);
        archive_format: config.archive_format;
        open_disc_info(game) => open_disc_info(game);
        remove_game(game) => {
            removing_game = game;
            remove_game_dialog.show();
        }
        archive_game(game) => archive_game(game);
    }

    remove_game_dialog := Dialog {
        width: root.width;
        height: root.height;
        title: "Do you want to remove this Game?";
        icon: @image-url("../mdi/alert.svg");
        default_action_text: "Yes";
        actions: ["No"];

        default_action_clicked => {
            self.close();
            remove_dir(removing_game.path);
            refresh_games();
        }

        action_clicked(i) => {
            if i == 0 {
                self.close();
            }
        }

        MaterialText {
            width: self.preferred-width;

            vertical-alignment: center;
            horizontal-alignment: center;
            text: "Are you sure you want to remove " + removing_game.display-title + "?";
        }
    }
}
