name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  # ==================================================================================
  #  Build Jobs: Compile the application for each platform and upload as an artifact.
  # ==================================================================================
  build-macos:
    name: Build for macOS (Universal) with Tauri Bundler
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Universal macOS App and DMG
        run: |
          # Build the application for both architectures
          cargo build --target x86_64-apple-darwin --release
          cargo build --target aarch64-apple-darwin --release

          # Create a universal binary by combining the two architectures
          mkdir -p target/universal-apple-darwin/release
          lipo -create -output target/universal-apple-darwin/release/tiny-wii-backup-manager \
            target/x86_64-apple-darwin/release/tiny-wii-backup-manager \
            target/aarch64-apple-darwin/release/tiny-wii-backup-manager

          # Bundle the application into a DMG
          cargo install tauri-cli --version "^2.0.0" --locked
          cargo tauri bundle --bundles dmg --target universal-apple-darwin
          mv target/universal-apple-darwin/release/bundle/dmg/*.dmg TinyWiiBackupManager-${{github.ref_name}}-Universal2.dmg

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-dmg
          path: TinyWiiBackupManager-${{github.ref_name}}-Universal2.dmg

  build-linux:
    name: Build for Linux (${{ matrix.arch }}) with Tauri Bundler
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install original Linux dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y squashfs-tools libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build AppImage
        run: |
          # Build the application for the specified architecture
          cargo build --release

          # Bundle the application into an AppImage
          cargo install tauri-cli --version "^2.0.0" --locked
          cargo tauri bundle --bundles appimage
          mv target/release/bundle/appimage/*.AppImage TinyWiiBackupManager-${{github.ref_name}}-${{ matrix.arch }}.AppImage

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-appimage
          path: TinyWiiBackupManager-${{github.ref_name}}-${{ matrix.arch }}.AppImage

  build-windows:
    name: Build for Windows (x86_64 & aarch64) Executables
    runs-on: windows-2022
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Windows executables with Tauri Bundler
        run: |          
          cargo build --target x86_64-pc-windows-msvc --release
          cargo build --target aarch64-pc-windows-msvc --release

          Move-Item ./target/x86_64-pc-windows-msvc/release/tiny-wii-backup-manager.exe ./TinyWiiBackupManager-${{github.ref_name}}-x86_64.exe
          Move-Item ./target/aarch64-pc-windows-msvc/release/tiny-wii-backup-manager.exe ./TinyWiiBackupManager-${{github.ref_name}}-aarch64.exe

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-executables
          path: |
            TinyWiiBackupManager-${{github.ref_name}}-x86_64.exe
            TinyWiiBackupManager-${{github.ref_name}}-aarch64.exe

  # ==================================================================================
  #  Release Job: Collects all build artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux, build-windows]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true