name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-unknown-linux-gnu
      # Use the full expression to correctly handle PRs vs. tags/branches
      FILENAME: TWBM-${{ github.head_ref || github.ref_name }}-Linux-${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Set up mold
        uses: rui314/setup-mold@v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          
          # Install egui and appimage dependencies
          sudo apt-get install -y \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev \
            squashfs-tools

          # Install cargo-bundle
          cargo install --locked cargo-bundle

      - name: Build and package binary
        run: |
          cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}
          cargo bundle --release --target ${{ env.TARGET_TRIPLE }} --format appimage

      - name: Package for Linux
        run: |
          mkdir dist
          mv target/${{ env.TARGET_TRIPLE }}/release/bundle/appimage/*.AppImage "dist/${{ env.FILENAME }}.AppImage"

          # Also create tarball with plain binary
          mv target/${{ env.TARGET_TRIPLE }}/release/tiny-wii-backup-manager "${{ env.FILENAME }}"
          tar -czf "dist/${{ env.FILENAME }}.tar.gz" "${{ env.FILENAME }}"

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist-${{ matrix.arch }}
          path: dist/*

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
          - arch: aarch64
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-pc-windows-msvc
      # Use the full expression to correctly handle PRs vs. tags/branches
      FILENAME: TWBM-${{ github.head_ref || github.ref_name }}-Windows-${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Build binary
        run: cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}

      - name: Package for Windows
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist
          Move-Item -Path "target/${{ env.TARGET_TRIPLE }}/release/tiny-wii-backup-manager.exe" -Destination "${{ env.FILENAME }}.exe"
          Compress-Archive -Path "${{ env.FILENAME }}.exe" -DestinationPath "dist/${{ env.FILENAME }}.zip"

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist-${{ matrix.arch }}
          path: dist/*

  build-macos:
    name: Build for MacOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
          - arch: x86_64
    env:
      TARGET_TRIPLE: ${{ matrix.arch }}-apple-darwin
      APP_PATH: target/${{ matrix.arch }}-apple-darwin/release/bundle/osx/TinyWiiBackupManager.app
      ARCHIVE_NAME: macos-app.zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ env.TARGET_TRIPLE }}
          cache-key: ${{ env.TARGET_TRIPLE }}

      - name: Install dependencies
        run: cargo install --locked cargo-bundle

      - name: Build binary
        run: |
          cargo build --release --locked --target ${{ env.TARGET_TRIPLE }}
          cargo bundle --release --target ${{ env.TARGET_TRIPLE }} --format osx

      - name: Archive the application bundle using ditto
        run: >
          ditto
          -c -k --sequesterRsrc --keepParent
          "${{ env.APP_PATH }}"
          "${{ env.ARCHIVE_NAME }}"

      - name: Upload MacOS application bundle
        uses: actions/upload-artifact@v4
        with:
          name: macos-app-${{ matrix.arch }}
          path: ${{ env.ARCHIVE_NAME }}

  package-macos:
    name: Package MacOS Universal2
    runs-on: macos-latest
    needs: build-macos
    env:
      # Use the full expression to correctly handle PRs vs. tags/branches
      FILENAME: TWBM-${{ github.head_ref || github.ref_name }}-MacOS-Universal2
    steps:
      - name: Install dependencies
        run: brew install graphicsmagick imagemagick

      - name: Download aarch64 app bundle
        uses: actions/download-artifact@v4
        with:
          name: macos-app-aarch64
          path: aarch64_app

      - name: Download x86_64 app bundle
        uses: actions/download-artifact@v4
        with:
          name: macos-app-x86_64
          path: x86_64_app

      - name: Extract application bundles
        run: |
          unzip aarch64_app/macos-app.zip -d aarch64_app/
          unzip x86_64_app/macos-app.zip -d x86_64_app/

      - name: Create Universal2 app and DMG
        run: |
          mkdir dist
          
          # Copy the aarch64 app to use as a template for our final universal app
          cp -R aarch64_app/TinyWiiBackupManager.app .
          
          # Create the universal binary using lipo, referencing the predictable downloaded paths
          # All file attributes and permissions are preserved by ditto/unzip.
          lipo \
            -create \
            -output ./TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            aarch64_app/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            x86_64_app/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager
          
          # Create DMG
          npx --yes create-dmg TinyWiiBackupManager.app . || true
          mv TinyWiiBackupManager*.dmg "dist/${{ env.FILENAME }}.dmg"

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, package-macos ]
    steps:
      - name: Download distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*dist*' # This pattern will match all final distributable artifacts
          merge-multiple: true # This places all matching artifacts into a single 'artifacts' directory

      - name: Create version.txt (only if not an alpha or beta)
        if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta')"
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
            version.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}