// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { IconButton, Vertical, MaterialText, ElevatedCard, MaterialPalette, Horizontal, CircularProgressIndicator, SnackBar } from "@material";
import { SideBar } from "sidebar.slint";
import { GamesPage } from "games.slint";
import { Game, HbcApp, WiiOutputFormat, ArchiveFormat, TaskType, UpdateInfo, Config, OscWiiApp } from "common.slint";
import { HbcAppGrid } from "hbc_app_grid.slint";
import { SettingsPage } from "settings.slint";
import { Status } from "status.slint";
import { HbcAppInfo } from "hbc_app_card.slint";
import { Wiiload } from "wiiload.slint";
import { OscWiiAppGrid } from "oscwii_app_grid.slint";

export * from "common.slint";

export component MainWindow inherits Window {
    in property <string> app_name: "";
    in-out property <string> dir_name: "";
    in property <string> disk_usage: "";
    in property <bool> is_macos: false;
    in-out property <int> current_index: 0;
    in property <[Game]> games;
    in-out property <[Game]> filtered_games: [];
    in property <[HbcApp]> hbc_apps;
    in-out property <[HbcApp]> filtered_hbc_apps: [];
    in property <string> status: "";
    in property <TaskType> task_type: TaskType.Unknown;
    in-out property <int> task_count: 0;
    in property <UpdateInfo> update_info;
    out property <HbcApp> current_app;
    in-out property <Config> config;
    in-out property <[OscWiiApp]> oscwii_apps: [];
    in-out property <[OscWiiApp]> filtered_oscwii_apps: [];
    property <OscWiiApp> pushing_oscwii;

    callback choose_mount_point();
    callback open_url(string);
    callback remove_dir(string);
    callback add_games(Config);
    callback archive_game(Game, Config);
    callback add_apps(Config);
    callback open_data_dir();
    callback update_config(Config);
    callback push_zip(string);
    callback push_oscwii(string, string);
    callback load_oscwii_apps() -> [OscWiiApp];
    callback update_filtered_oscwii_apps([OscWiiApp], string) -> [OscWiiApp];
    callback update_filtered_hbc_apps([HbcApp], string) -> [HbcApp];
    callback update_filtered_games([Game], string) -> [Game];
    callback dot_clean(string);
    callback download_oscwii(string, string);
    callback download_wiitdb(string);
    callback verify_game(Game);
    callback download_all_covers(string);

    public function reset_filters() {
        filtered_games = update_filtered_games(games, "");
        filtered_hbc_apps = update_filtered_hbc_apps(hbc_apps, "");
    }

    preferred-width: 800px;
    preferred-height: 600px;
    title: app_name + " • " + games.length + " Games" + (dir_name.is_empty ? "" : " • " + dir_name + " (" + disk_usage + ")");

    HorizontalLayout {
        SideBar {
            current_index <=> current_index;
            is_macos: is_macos;
            game_count: games.length;
            app_count: hbc_apps.length;
            update_info: update_info;
            choose_mount_point => {
                choose_mount_point();
            }
            set-window-title(title) => {
                root.title = app_name + title + (dir_name.is_empty ? "" : " • " + dir_name + " (" + disk_usage + ")");
            }
            open-url(url) => {
                open_url(url);
            }
            update_oscwii_apps => {
                if oscwii_apps.length == 0 {
                    oscwii_apps = load_oscwii_apps();
                    filtered_oscwii_apps = update_filtered_oscwii_apps(oscwii_apps, "");
                }
            }
            download_wiitdb => {
                download_wiitdb(config.mount-point);
            }
            download_all_covers => {
                download_all_covers(config.mount-point);
            }
            dot_clean => {
                dot_clean(config.mount-point);
            }
        }

        VerticalLayout {
            if current_index == 0 && !dir_name.is-empty: GamesPage {
                games: filtered_games;
                config <=> config;
                open_game_info(game) => {
                    open_url("https://www.gametdb.com/Wii/" + game.id);
                }
                remove_game(game) => {
                    remove_dir(game.path);
                }
                update_filter(filter) => {
                    filtered_games = update_filtered_games(games, filter);
                }
                archive_game(game) => {
                    archive_game(game, config);
                }
                verify_game(game) => {
                    verify_game(game);
                }
                update_config => {
                    update_config(config);
                }
                add_games => {
                    add_games(config);
                }
            }

            if current_index == 1 && !dir_name.is-empty: HbcAppGrid {
                apps: filtered_hbc_apps;
                config <=> config;
                open_app_info(app) => {
                    current_app = app;
                    app_info.show();
                }
                open_url(url) => {
                    open_url(url);
                }
                remove_dir(path) => {
                    remove_dir(path);
                }
                update_filter(filter) => {
                    filtered_hbc_apps = update_filtered_hbc_apps(hbc_apps, filter);
                }
                update_config => {
                    update_config(config);
                }
                add_apps => {
                    add_apps(config);
                }
                open-wiiload => {
                    wiiload.show();
                }
            }

            if current_index == 2: OscWiiAppGrid {
                apps: filtered_oscwii_apps;
                config <=> config;
                open_url(url) => {
                    open_url(url);
                }
                update_filter(filter) => {
                    filtered_oscwii_apps = update_filtered_oscwii_apps(oscwii_apps, filter);
                }
                download_oscwii(url) => {
                    download_oscwii(config.mount-point, url);
                }
                push_oscwii(app) => {
                    pushing_oscwii = app;
                    oscwii_wiiload.show();
                }
                update_config => {
                    update_config(config);
                }
            }

            if current_index == 3: SettingsPage {
                config <=> config;
                update_config() => {
                    update_config(config);
                }
                open_data_dir => open_data_dir();
            }

            if dir_name.is-empty && status.is-empty: Vertical {
                alignment: end;
                padding-bottom: 16px;

                MaterialText {
                    text: "⬅  Choose a Drive or Directory";
                    font-size: 18px;
                }
            }

            if task_count > 0: Status {
                status: status;
                task_type: task_type;
                task_count: task_count;
            }
        }
    }

    app_info := HbcAppInfo {
        width: root.width;
        height: root.height;
        app: current_app;
    }

    wiiload := Wiiload {
        width: root.width;
        height: root.height;
        config <=> config;
        update_config() => {
            update_config(config);
        }
        push_zip => {
            push_zip(config.wii-ip);
        }
    }

    oscwii_wiiload := Wiiload {
        width: root.width;
        height: root.height;
        config <=> config;
        title: "Sending " + pushing_oscwii.name;
        default_action_text: "Sending";
        update_config() => {
            update_config(config);
        }
        push_zip => {
            push_oscwii(pushing_oscwii.zip-url, config.wii-ip);
        }
    }
}
