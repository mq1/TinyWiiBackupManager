name: Release

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

permissions:
  contents: write

# Global environment variable available to all jobs in this workflow.
# - For pull requests, it uses 'PR-123'.
# - For pushes, it uses the branch or tag name (e.g., 'main' or 'v1.2.0').
env:
  VERSION_NAME: ${{ github.event_name == 'pull_request' && format('PR-{0}', github.event.pull_request.number) || github.ref_name }}

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  # ==================================================================================
  build-linux:
    name: Build for Linux
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-24.04
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm
            arch: aarch64
          - target: i686-unknown-linux-gnu
            runner: ubuntu-24.04
            arch: i686
            deps: libc6-dev-i386

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Set up Mold
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.deps }} libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Download LinuxDeploy
        if: matrix.arch == 'x86_64' || matrix.arch == 'aarch64'
        run: |
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${{ matrix.arch }}.AppImage"
          wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-${{ matrix.arch }}.AppImage"
          chmod +x linuxdeploy*.AppImage

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}
        env:
          CC: "clang"
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: "clang"
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS: "-C link-arg=-fuse-ld=/usr/local/bin/mold"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "clang"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUSTFLAGS: "-C link-arg=-fuse-ld=/usr/local/bin/mold"
          CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER: "clang"
          CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_RUSTFLAGS: "-C link-arg=-fuse-ld=/usr/local/bin/mold -C link-arg=--target=i686-unknown-linux-gnu"

      - name: Package binary as tar.gz
        run: |
          mkdir dist
          cp "target/${{ matrix.target }}/release/TinyWiiBackupManager" TinyWiiBackupManager
          chmod 755 TinyWiiBackupManager
          tar -I 'gzip -9' -cvf "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-linux-${{ matrix.arch }}.tar.gz" TinyWiiBackupManager

      - name: Package binary as AppImage
        if: matrix.arch == 'x86_64' || matrix.arch == 'aarch64'
        run: |
          ./linuxdeploy-${{ matrix.arch }}.AppImage --appdir TinyWiiBackupManager.AppDir -e target/${{ matrix.target }}/release/TinyWiiBackupManager -d assets/TinyWiiBackupManager.desktop -i assets/TinyWiiBackupManager.png --output appimage
          mv TinyWiiBackupManager*.AppImage "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-linux-${{ matrix.arch }}.AppImage"
          mv TinyWiiBackupManager*.AppImage.zsync "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-linux-${{ matrix.arch }}.AppImage.zsync"
        env:
          LDAI_UPDATE_INFORMATION: "gh-releases-zsync|mq1|TinyWiiBackupManager|latest|*${{ matrix.arch }}.AppImage.zsync"

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: dist/*

  build-windows:
    name: Build for Windows
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
            setup: true
            features: app-dir native-tls
          - target: x86_64-pc-windows-msvc
            arch: x64
            features: native-tls
            suffix: -portable
          - target: aarch64-pc-windows-msvc
            arch: arm64
            features: app-dir native-tls
          - target: aarch64-pc-windows-msvc
            arch: arm64
            features: native-tls
            suffix: -portable
          - target: i686-pc-windows-msvc
            arch: x86
            features: app-dir bundled-tls
          - target: i686-pc-windows-msvc
            arch: x86
            features: bundled-tls
            suffix: -portable

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install dependencies
        if: matrix.setup
        run: cargo install cargo-packager --version ^0.11 --locked

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }} --no-default-features --features "${{ matrix.features }}"
        env:
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER: "rust-lld.exe"
          CARGO_TARGET_AARCH64_PC_WINDOWS_MSVC_LINKER: "rust-lld.exe"
          CARGO_TARGET_I686_PC_WINDOWS_MSVC_LINKER: "rust-lld.exe"

      - name: Package binary as zip
        shell: pwsh
        run: |
          New-Item -Path "dist" -ItemType "directory"
          Copy-Item -Path "target/${{ matrix.target }}/release/TinyWiiBackupManager.exe" -Destination TinyWiiBackupManager.exe
          7z a -tzip -mx=9 "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-windows-${{ matrix.arch }}${{ matrix.suffix }}.zip" TinyWiiBackupManager.exe

      - name: Package binary as installer (only x64 for now)
        if: matrix.setup
        shell: pwsh
        run: |
          cargo packager --release --target ${{ matrix.target }} --formats nsis
          Move-Item -Path "target/${{ matrix.target }}/release/TinyWiiBackupManager*-setup.exe" -Destination "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-windows-${{ matrix.arch }}-setup.exe"

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}${{ matrix.suffix }}
          path: dist/*

  build-win7:
    name: Build for Windows 7
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-win7-windows-msvc
            arch: x64
            features: app-dir bundled-tls
          - target: x86_64-win7-windows-msvc
            arch: x64
            features: bundled-tls
            suffix: -portable
          - target: i686-win7-windows-msvc
            arch: x86
            features: app-dir bundled-tls
          - target: i686-win7-windows-msvc
            arch: x86
            features: bundled-tls
            suffix: -portable

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          components: rust-src
          cache: false

      - name: Build binary
        run: cargo build -Z build-std=std,panic_abort --release --locked --target ${{ matrix.target }} --no-default-features --features "${{ matrix.features }}"
        env: 
          RUSTC_BOOTSTRAP: 1
          CARGO_TARGET_X86_64_WIN7_WINDOWS_MSVC_LINKER: "rust-lld.exe"
          CARGO_TARGET_I686_WIN7_WINDOWS_MSVC_LINKER: "rust-lld.exe"

      - name: Package binary as zip
        shell: pwsh
        run: |
          New-Item -Path "dist" -ItemType "directory"
          Move-Item -Path "target/${{ matrix.target }}/release/TinyWiiBackupManager.exe" -Destination "TinyWiiBackupManager.exe"
          7z a -tzip -mx=9 "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-win7-${{ matrix.arch }}${{ matrix.suffix }}.zip" "TinyWiiBackupManager.exe"

      - name: Upload Windows 7 distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}${{ matrix.suffix }}
          path: dist/*

  build-macos:
    name: Build for macOS
    runs-on: macos-26
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: arm64
            features: app-dir native-tls
          - target: x86_64-apple-darwin
            arch: x86_64
            features: app-dir bundled-tls

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          cargo install cargo-packager --version ^0.11 --locked
          npm i -g appdmg@0.6.6

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }} --no-default-features --features "${{ matrix.features }}"

      - name: Create app with cargo-packager
        run: cargo packager --release --target ${{ matrix.target }} --formats app

      - name: Create dmg (assets from sindresorhus/create-dmg)
        run: |
          mkdir dist
          appdmg assets/appdmg-${{ matrix.arch }}.json "dist/TinyWiiBackupManager-${{ env.VERSION_NAME }}-macos-${{ matrix.arch }}.dmg"

      - name: Upload macOS distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    if: github.ref_type == 'tag'
    runs-on: ubuntu-24.04
    needs: [ build-linux, build-windows, build-win7, build-macos ]
    steps:
      - name: Download distributables
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '*dist*' # This pattern will match all final distributable artifacts
          merge-multiple: true # This places all matching artifacts into a single 'dist' directory

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.ref_name }}
          files: dist/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version.txt
        run: echo -n "${{ github.ref_name }}" > version.txt

      - name: Generate downloads table
        run: sed 's/{{ version }}/${{ env.VERSION_NAME }}/g' assets/downloads-template.md > downloads.md

      - name: Add release metadata
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.ref_name }}
          files: version.txt
          body_path: downloads.md
          append_body: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  winget:
    needs: [ release ]
    name: Publish to WinGet
    runs-on: windows-2025
    steps:
      - uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: mq1.TinyWiiBackupManager
          token: ${{ secrets.WINGET_TOKEN }}
          installers-regex: 'setup\.exe$'
