// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { ScrollView, Vertical, TextField, SegmentedButton, Horizontal } from "@material";
import { Game, Config } from "common.slint";
import { GameCard, GameCardButtons } from "game_card.slint";

export component GameGrid inherits ScrollView {
    in property <[Game]> games;
    out property <string> filter: "";
    in-out property <Config> config;

    property <length> card_w: config.as_list ? self.width - 16px : 176px;
    property <length> card_h: config.as_list ? 42px : 230px;

    property <int> columns: config.as_list ? 1 : (self.width / card_w).floor();
    property <int> rows: config.as_list ? games.length : (games.length / columns).ceil();

    callback open_url(string);
    callback remove_dir(string);
    callback update_filter(string);
    callback archive_game(string);
    callback verify_game(string);
    callback update_config();

    horizontal-stretch: 1;
    vertical-stretch: 1;
    viewport_height: rows * card_h + 56px + 16px;

    Vertical {
        Horizontal {
            TextField {
                height: 56px;
                leading_icon: @image-url("../mdi/magnify.svg");
                label: "Filter";
                placeholder-text: "Search...";
                edited(text) => {
                    filter = text;
                    update_filter(text.to-lowercase());
                }
            }

            SegmentedButton {
                height: 56px;

                items: [
                    { text: "As List", icon: @image-url("../mdi/view-list.svg") },
                    { text: "As Grid", icon: @image-url("../mdi/view-grid.svg") }
                ];
                current_index: config.as_list ? 0 : 1;
                index_changed(index) => {
                    config.as_list = index == 0;
                    update_config();
                }
            }
        }

        Rectangle {
            for game[index] in games: GameCard {
                x: mod(index, columns) * card_w;
                y: (index / columns).floor() * card_h;
                is_li: config.as_list;
                width: card_w;
                height: card_h;
                game: game;
            }

            for game[index] in games: GameCardButtons {
                x: mod(index, columns) * card_w;
                y: (index / columns).floor() * card_h + (card_h - 38px);
                width: card_w;
                alignment: config.as_list ? end : center;
                padding-right: config.as_list ? 16px : 4px;
                archive_format: config.archive_format;
                open_game_info => {
                    open_url("https://www.gametdb.com/Wii/" + game.id);
                }
                open_game_dir => {
                    open_url(game.path);
                }
                remove_game => {
                    remove_dir(game.path);
                }
                archive_game => {
                    archive_game(game.path);
                }
                verify_game => {
                    verify_game(game.path);
                }
            }
        }
    }
}
