name: Release

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

permissions:
  contents: write

# Global environment variable available to all jobs in this workflow.
# - For pull requests, it uses 'PR-123'.
# - For pushes, it uses the branch or tag name (e.g., 'main' or 'v1.2.0').
env:
  VERSION_NAME: ${{ github.event_name == 'pull_request' && format('PR-{0}', github.event.pull_request.number) || github.ref_name }}

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  # ==================================================================================
  build-linux:
    name: Build for Linux
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          cargo install cargo-packager --version ^0.11 --locked

      - name: Build and package binary
        run: |
          cargo build --release --locked --target ${{ matrix.target }}
          cargo packager --release --target ${{ matrix.target }} --formats appimage

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: dist/*

  build-windows-setup:
    name: Build Windows Setup
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
          - target: aarch64-pc-windows-msvc
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Install dependencies
        run: cargo install cargo-packager --version ^0.11 --locked

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Package binary as installer
        run: cargo packager --release --target ${{ matrix.target }} --formats nsis

      - name: Upload Windows setup
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}-setup
          path: dist/*

  build-windows-portable:
    name: Build Windows Portable
    runs-on: windows-2025
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
          - target: aarch64-pc-windows-msvc
            arch: arm64
          - target: i686-win7-windows-msvc
            arch: x86

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Build binary with portable feature
        run: cargo build --release --locked --target ${{ matrix.target }} --features portable --no-default-features

      - name: Make dist directory
        shell: pwsh
        run: New-Item -Path "dist" -ItemType "directory"

      - name: Package portable binary as zip
        shell: pwsh
        run: |
          Move-Item -Path "target/${{ matrix.target }}/release/TinyWiiBackupManager.exe" -Destination "TinyWiiBackupManager_${{ env.VERSION_NAME }}_${{ matrix.arch }}-win-portable.exe"
          7z a -tzip -mx=9 "dist/TinyWiiBackupManager_${{ env.VERSION_NAME }}_${{ matrix.arch }}-win-portable.zip" "TinyWiiBackupManager_${{ env.VERSION_NAME }}_${{ matrix.arch }}-win-portable.exe"

      - name: Upload Windows portable distributables
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}-portable
          path: dist/*
  
  build-win7:
    name: Build for Windows 7
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          components: "rust-src"
          cache-key: i686-win7-windows-gnu

      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-i686
      
      - name: Build binary
        run: cargo build -Z build-std=std,panic_abort --release --locked --target i686-win7-windows-gnu --features portable --no-default-features
        env: 
          RUSTC_BOOTSTRAP: 1
      
      - name: Package binary as zip
        run: |
          mkdir dist
          mv target/i686-win7-windows-gnu/release/TinyWiiBackupManager.exe TinyWiiBackupManager_${{ env.VERSION_NAME }}_x86-win7.exe
          zip -9 dist/TinyWiiBackupManager_${{ env.VERSION_NAME }}_x86-win7.zip TinyWiiBackupManager_${{ env.VERSION_NAME }}_x86-win7.exe
      
      - name: Upload Windows 7 distributable
        uses: actions/upload-artifact@v4
        with:
          name: dist-win7
          path: dist/*

  build-macos:
    name: Build for MacOS
    runs-on: macos-26
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
          - target: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          target: ${{ matrix.target }}
          cache-key: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Upload MacOS binary
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/TinyWiiBackupManager

  package-macos:
    name: Package MacOS Universal
    runs-on: macos-26
    needs: build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.90.0
          cache-key: universal-apple-darwin

      - name: Install dependencies
        run: |
          brew install graphicsmagick imagemagick
          npm install -g create-dmg@^7.1.0
          cargo install cargo-packager --version ^0.11 --locked

      - name: Download MacOS binaries
        uses: actions/download-artifact@v4
        with:
          pattern: '*darwin*'

      - name: Create Universal app and DMG
        run: |
          mkdir -p target/universal-apple-darwin/release
          
          # Create the universal binary using lipo
          lipo \
            -create \
            -output target/universal-apple-darwin/release/TinyWiiBackupManager \
            bin-*-apple-darwin/TinyWiiBackupManager
          
          # Set correct binary permissions
          chmod 755 target/universal-apple-darwin/release/TinyWiiBackupManager
          
          # Create DMG with cargo-packager
          cargo packager --release --target universal-apple-darwin --formats app

          # Create DMG with create-dmg
          create-dmg --no-code-sign dist/TinyWiiBackupManager.app

          # Rename DMG
          mv TinyWiiBackupManager*.dmg dist/TinyWiiBackupManager_${{ env.VERSION_NAME }}_universal.dmg

          # Remove app bundle
          rm -rf dist/TinyWiiBackupManager.app

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-24.04
    needs: [ build-linux, build-windows-setup, build-windows-portable, package-macos ]
    steps:
      - name: Download distributables
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: '*dist*' # This pattern will match all final distributable artifacts
          merge-multiple: true # This places all matching artifacts into a single 'dist' directory

      - name: Create version.txt
        run: echo -n "${{ github.ref_name }}" > version.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.ref_name }}
          files: |
            dist/*
            version.txt
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  winget:
    needs: [ release ]
    name: Publish to WinGet
    runs-on: windows-2025
    steps:
      - uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: mq1.TinyWiiBackupManager
          token: ${{ secrets.WINGET_TOKEN }}
