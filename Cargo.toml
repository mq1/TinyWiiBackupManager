[package]
name = "tiny-wii-backup-manager"
version = "2.4.8"
authors = ["Manuel Quarneti <mq1@ik.me>"]
edition = "2024"
license = "GPL-2.0-only"
repository = "https://github.com/mq1/TinyWiiBackupManager"
description = "A dead simple Wii Backup Manager"
build = "build.rs"

[[bin]]
name = "TinyWiiBackupManager"
path = "src/main.rs"

[package.metadata.packager]
product-name = "TinyWiiBackupManager"
identifier = "it.mq1.TinyWiiBackupManager"
icons = ["assets/logo@2x.png", "assets/logo-small.png"]
copyright = "Copyright © 2025 Manuel Quarneti. Licensed under GPL-2.0-only."
category = "Utility"
out_dir = "dist"


[package.metadata.winres]
FileDescription = "A dead simple Wii Backup Manager"
ProductName = "TinyWiiBackupManager"
OriginalFilename = "TinyWiiBackupManager.exe"
LegalCopyright = "Copyright © 2025 Manuel Quarneti. Licensed under GPL-2.0-only."


[dependencies]
egui_extras = { version = "0.32", default-features = false, features = [
    "image",
    "file",
] }
image = { version = "0.25", default-features = false, features = ["png"] }
egui-notify = "0.20"
egui_inbox = "0.9"
rfd = "0.15"
anyhow = "1.0"
semver = "1.0"
fs_extra = "1.3"
open = "5.3"
notify = "8.2"
size = "0.5"
log = "0.4"
env_logger = { version = "0.11", default-features = false, features = [
    "auto-color",
    "humantime",
] }
const_format = { version = "0.2", features = ["rust_1_64"] }
nod = { git = "https://github.com/mq1/nod", branch = "strip-wbfs" }
hex = "0.4"
serde = { version = "1.0", features = ["derive"] }
zip = { version = "5.0", default-features = false, features = [
    "deflate-flate2",
] }
const-str = "0.7"
strum = { version = "0.27", features = ["derive"] }
egui-theme-switch = "0.4"
flume = "0.11"
tempfile = "3.21"
walkdir = "2.5"
num_cpus = "1.17"
sanitize-filename-reader-friendly = "2.3"
quick-xml = { version = "0.38", features = ["serialize"] }
time = { version = "0.3", features = ["parsing", "serde", "macros"] }
phf = { version = "0.13", features = ["macros"] }
fs2 = "0.4"
path-slash = "0.2"
ureq = { version = "3.1", features = ["json"] }
postcard = "1.1"
zstd = "0.13"

[target.'cfg(not(all(target_os = "windows", any(target_arch = "x86_64", target_arch = "aarch64"))))'.dependencies]
eframe = { version = "0.32", features = ["persistence"] }

# Windows uses dx12 to enable software rendering (WARP) as a fallback
[target.'cfg(all(target_os = "windows", any(target_arch = "x86_64", target_arch = "aarch64")))'.dependencies]
eframe = { version = "0.32", default-features = false, features = [
    "accesskit",
    "default_fonts",
    "wgpu",
    "persistence",
] }
wgpu = { version = "25", default-features = false, features = ["dx12"] }


[build-dependencies]
quick-xml = { version = "0.38", features = ["serialize"] }
serde = { version = "1.0", features = ["derive"] }
serde_plain = "1.0"
postcard = { version = "1.1", features = ["alloc"] }
zstd = "0.13"


[target.'cfg(target_os = "windows")'.build-dependencies]
winres = "0.1"


[profile.release]
opt-level = 'z'     # Highest optimization level for size
lto = "fat"         # Full Link Time Optimization across crates
codegen-units = 1   # Single codegen unit for best cross-function inlining
strip = "debuginfo" # Strip everything except debug info (Rust 1.70+)
panic = "abort"     # Smaller & faster by removing unwinding code
debug = 1           # Minimal debug info (enough for backtraces & profiling)

[profile.dev.build-override]
opt-level = 2

[profile.release.build-override]
opt-level = 2

[profile.dev.package.nod]
opt-level = 3

[profile.release.package.nod]
opt-level = 3
