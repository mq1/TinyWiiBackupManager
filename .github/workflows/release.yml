name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

# ==================================================================================
#  Concurrency: Ensures only one release workflow runs at a time for a given tag.
# ==================================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux (x86_64 & aarch64)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Set up Mold
        uses: rui314/setup-mold@v1

      - name: Install dependencies
        run: |
          sudo apt-get update

          # Install aarch64 toolchain
          sudo apt-get install -y gcc-aarch64-linux-gnu

          # Install eframe dependencies
          sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
          
          # Install FUSE (required for building AppImage)
          sudo apt-get install -y libfuse2

      - name: Install LinuxDeploy
        run: |
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
          chmod +x linuxdeploy*.AppImage

      - name: Build binaries in parallel
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu &
          cargo build --release --target aarch64-unknown-linux-gnu &
          wait

      - name: Package for Linux (x86_64)
        run: python3 scripts/bundle.py linux_x86_64

      - name: Package for Linux (aarch64)
        run: python3 scripts/bundle.py linux_aarch64

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/*

  build-windows:
    name: Build for Windows (x86_64 & aarch64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build binaries in parallel
        shell: bash
        run: |
          cargo build --release --target x86_64-pc-windows-msvc &
          cargo build --release --target aarch64-pc-windows-msvc &
          wait

      - name: Package for Windows (x86_64)
        run: python3 scripts/bundle.py windows_x86_64
        env:
          PYTHONUTF8: "1"

      - name: Package for Windows (aarch64)
        run: python3 scripts/bundle.py windows_aarch64
        env:
          PYTHONUTF8: "1"

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/*

  build-macos:
    name: Build for MacOS (Universal2)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: brew install graphicsmagick imagemagick

      - name: Build binaries in parallel
        run: |
          cargo build --release --target aarch64-apple-darwin &
          cargo build --release --target x86_64-apple-darwin &
          wait

      - name: Package for MacOS (Universal2)
        run: python3 scripts/bundle.py macos_universal2

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, build-macos ]
    steps:
      - name: Download all distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version.txt
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            version.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}