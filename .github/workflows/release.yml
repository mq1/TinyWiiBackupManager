name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
            additional_packages: ""
          - target: aarch64-unknown-linux-gnu
            arch: aarch64
            additional_packages: gcc-aarch64-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Set up mold
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          
          # Install egui and appimage dependencies
          sudo apt-get install -y \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev \
            squashfs-tools ${{ matrix.additional_packages }}

          # Install cargo-bundle
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install cargo-bundle

      - name: Build binary
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          cargo build --release --locked --target ${{ matrix.target }}
          cargo bundle --release --target ${{ matrix.target }} --format appimage

      - name: Package for Linux
        run: |
          mkdir dist

          # Use sha for PR builds, ref_name for push builds
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REF_NAME="${{ github.event.pull_request.head.sha }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi

          mv target/${{ matrix.target }}/release/bundle/appimage/*.AppImage dist/TWBM-${REF_NAME}-Linux-${{ matrix.arch }}.AppImage

          # Also create tarball with plain binary
          mv target/${{ matrix.target }}/release/tiny-wii-backup-manager TWBM-${REF_NAME}-Linux-${{ matrix.arch }}
          tar -czf dist/TWBM-${REF_NAME}-Linux-${{ matrix.arch }}.tar.gz TWBM-${REF_NAME}-Linux-${{ matrix.arch }}

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist-${{ matrix.arch }}
          path: dist/*

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x86_64
          - target: aarch64-pc-windows-msvc
            arch: aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Package for Windows
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist
          
          # Use sha for PR builds, ref_name for push builds
          if ("${{ github.event_name }}" -eq "pull_request") {
            $RefName = "${{ github.event.pull_request.head.sha }}"
          } else {
            $RefName = "${{ github.ref_name }}"
          }
          
          Move-Item -Path "target/${{ matrix.target }}/release/tiny-wii-backup-manager.exe" -Destination "TWBM-${RefName}-Windows-${{ matrix.arch }}.exe"
          Compress-Archive -Path "TWBM-${RefName}-Windows-${{ matrix.arch }}.exe" -DestinationPath "dist/TWBM-${RefName}-Windows-${{ matrix.arch }}.zip"

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist-${{ matrix.arch }}
          path: dist/*

  build-macos:
    name: Build for MacOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: aarch64
          - target: x86_64-apple-darwin
            arch: x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: brew install cargo-bundle

      - name: Build binary
        run: |
          cargo build --release --locked --target ${{ matrix.target }}
          cargo bundle --release --target ${{ matrix.target }} --format osx

      - name: Upload MacOS application bundle
        uses: actions/upload-artifact@v4
        with:
          name: macos-app-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/bundle/osx

  package-macos:
    name: Package MacOS Universal2
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: Install dependencies
        run: brew install graphicsmagick imagemagick

      - name: Download aarch64 app bundle
        uses: actions/download-artifact@v4
        with:
          name: macos-app-aarch64
          path: aarch64_app

      - name: Download x86_64 app bundle
        uses: actions/download-artifact@v4
        with:
          name: macos-app-x86_64
          path: x86_64_app

      - name: Create Universal2 app and DMG
        run: |
          mkdir dist
          
          # Use sha for PR builds, ref_name for push builds
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REF_NAME="${{ github.event.pull_request.head.sha }}"
          else
            REF_NAME="${{ github.ref_name }}"
          fi
          
          # Copy the aarch64 app to use as a template for our final universal app
          cp -R aarch64_app/TinyWiiBackupManager.app .
          
          # Create the universal binary using lipo, referencing the predictable downloaded paths
          lipo \
            -create \
            -output ./TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            aarch64_app/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            x86_64_app/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager
          
          # Make the app executable
          chmod +x ./TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager

          # Create DMG
          npx --yes create-dmg TinyWiiBackupManager.app . || true
          mv TinyWiiBackupManager*.dmg dist/TWBM-${REF_NAME}-MacOS-Universal2.dmg

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, package-macos ]
    steps:
      - name: Download distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*dist*' # This pattern will match all final distributable artifacts
          merge-multiple: true # This places all matching artifacts into a single 'artifacts' directory

      - name: Create version.txt
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
            version.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}