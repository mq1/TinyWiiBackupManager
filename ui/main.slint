// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { IconButton, Vertical, MaterialText, ElevatedCard, MaterialPalette, Horizontal, CircularProgressIndicator, SnackBar, Icon, Dialog } from "@material";
import { SideBar } from "sidebar.slint";
import { GamesPage } from "games.slint";
import { Game, HbcApp, WiiOutputFormat, ArchiveFormat, TaskType, UpdateInfo, Config, OscWiiApp, DiscInfo } from "common.slint";
import { HbcAppsPage } from "hbc_apps.slint";
import { SettingsPage } from "settings.slint";
import { Status } from "status.slint";
import { HbcAppInfo } from "hbc_app_info.slint";
import { Wiiload } from "wiiload.slint";
import { OscWiiAppsPage } from "oscwii_apps.slint";
import { DiscInfoDialog } from "disc_info.slint";

import "../assets/Roboto-VariableFont_wdth,wght.ttf";
//import "../assets/Roboto-Regular.ttf";

export * from "common.slint";

export component MainWindow inherits Window {
    in property <string> app_name: "";
    in-out property <string> dir_name: "";
    in property <string> disk_usage: "";
    in property <bool> is_macos: false;
    in-out property <int> current_index: 0;
    in-out property <[Game]> games;
    in-out property <[Game]> filtered_games: [];
    in-out property <[HbcApp]> hbc_apps;
    in-out property <[HbcApp]> filtered_hbc_apps: [];
    in property <string> status: "";
    in property <TaskType> task_type: TaskType.Unknown;
    in-out property <int> task_count: 0;
    in property <UpdateInfo> update_info;
    in-out property <Config> config;
    in-out property <[OscWiiApp]> oscwii_apps: [];
    property <OscWiiApp> pushing_oscwii;
    property <{msg: string, is_err: bool}> dialog_msg;
    property <string> removing_dir;

    callback choose_mount_point();
    callback open_url(string);
    callback remove_dir(string);
    callback add_games(Config);
    callback archive_game(string, Config);
    callback add_apps(Config);
    callback open_data_dir();
    callback update_config(Config);
    callback push_file(string);
    callback push_oscwii(string, string);
    callback dot_clean(string);
    callback download_oscwii(string, string);
    callback download_wiitdb(string);
    callback verify_game(string);
    callback download_all_covers(string);
    callback refresh(string);
    callback sort(Config, [Game], [HbcApp]) -> { a: [Game], b: [HbcApp] };
    callback get_disc_info(string) -> DiscInfo;

    pure callback get_filtered_games([Game], string, bool, bool) -> [Game];
    pure callback get_filtered_hbc_apps([HbcApp], string) -> [HbcApp];
    pure callback get_filtered_oscwii_apps([OscWiiApp], string) -> [OscWiiApp];

    public function apply_sorting() {
        let all = sort(config, games, hbc_apps);
        games = all.a;
        hbc_apps = all.b;
    }

    property <string> disc_info_title;
    property <DiscInfo> disc_info_info;
    function open_disc_info_dialog(game: Game) {
        let info = get_disc_info(game.path);
        disc_info_title = game.display-title;
        disc_info_info = info;
        disc_info.show();
    }

    property <HbcApp> app_info_app;
    function open_app_info_dialog(app: HbcApp) {
        app_info_app = app;
        app_info.show();
    }

    preferred-width: 800px;
    preferred-height: 600px;
    title: app_name + " • " + games.length + " Games" + (dir_name.is_empty ? "" : " • " + dir_name + " (" + disk_usage + ")");
    icon: @image-url("../assets/logo-small.png");
    default-font-family: "Roboto";

    HorizontalLayout {
        SideBar {
            current_index <=> current_index;
            is_macos: is_macos;
            game_count: games.length;
            app_count: hbc_apps.length;
            update_info: update_info;
            choose_mount_point => {
                choose_mount_point();
            }
            set-window-title(title) => {
                root.title = app_name + title + (dir_name.is_empty ? "" : " • " + dir_name + " (" + disk_usage + ")");
            }
            open-url(url) => {
                open_url(url);
            }
            download_wiitdb => {
                download_wiitdb(config.mount-point);
            }
            download_all_covers => {
                download_all_covers(config.mount-point);
            }
            dot_clean => {
                dot_clean(config.mount-point);
            }
        }

        VerticalLayout {
            if current_index == 0 && !dir_name.is-empty: GamesPage {
                config <=> config;
                get_games(filter, show_wii, show_gc) => get_filtered_games(games, filter, show_wii, show_gc);
                open_disc_info(game) => {
                    open_disc_info_dialog(game);
                }
                remove_game(game) => {
                    removing_dir = game.path;
                    remove_dir_dialog.show();
                }
                archive_game(game) => {
                    archive_game(game.path, config);
                }
                update_config => {
                    update_config(config);
                }
                add_games => {
                    add_games(config);
                }
                trigger_sort(filter) => {
                    apply_sorting();
                }
                refresh => {
                    refresh(config.mount-point);
                }
            }

            if current_index == 1 && !dir_name.is-empty: HbcAppsPage {
                config <=> config;
                get_apps(filter) => get_filtered_hbc_apps(hbc_apps, filter);
                open_app_info(app) => {
                    open_app_info_dialog(app);
                }
                remove_app(app) => {
                    removing_dir = app.path;
                    remove_dir_dialog.show();
                }
                update_config => {
                    update_config(config);
                }
                add_apps => {
                    add_apps(config);
                }
                open-wiiload => {
                    wiiload.show();
                }
                trigger_sort(filter) => {
                    apply_sorting();
                }
                refresh => {
                    refresh(config.mount-point);
                }
            }

            if current_index == 2: OscWiiAppsPage {
                config <=> config;
                open_oscwii_info(app) => {
                    open_url("https://oscwii.org/library/app/" + app.slug);
                }
                get_apps(filter) => get_filtered_oscwii_apps(oscwii_apps, filter);
                download_oscwii(app) => {
                    download_oscwii(config.mount-point, app.zip-url);
                }
                push_oscwii(app) => {
                    push_oscwii(app.zip-url, config.wii-ip);
                    update_config(config);
                }
                update_config => {
                    update_config(config);
                }
            }

            if current_index == 3: SettingsPage {
                config <=> config;
                update_config() => {
                    update_config(config);
                }
                open_data_dir => open_data_dir();
            }

            if (current_index == 0 || current_index == 1) && dir_name.is-empty: VerticalLayout {
                alignment: center;

                Horizontal {
                    alignment: center;

                    MaterialText {
                        vertical-alignment: center;
                        text: "Click on";
                    }

                    Icon {
                        source: @image-url("../mdi/menu.svg");
                    }

                    Icon {
                        source: @image-url("../mdi/arrow-right.svg");
                    }

                    Icon {
                        source: @image-url("../mdi/harddisk.svg");
                    }

                    MaterialText {
                        vertical-alignment: center;
                        text: "to choose a Drive or Directory";
                    }
                }
            }

            if task_count > 0: Status {
                status: status;
                task_type: task_type;
                task_count: task_count;
            }
        }
    }

    app_info := HbcAppInfo {
        width: root.width;
        height: root.height;
        app: app_info_app;
        open_url(url) => {
            open_url(url);
        }
    }

    disc_info := DiscInfoDialog {
        width: root.width;
        height: root.height;
        title: disc_info_title;
        info: disc_info_info;
        open_url(url) => {
            open_url(url);
        }
        verify_game(path) => {
            verify_game(path);
        }
    }

    wiiload := Wiiload {
        width: root.width;
        height: root.height;
        config <=> config;
        push_file => {
            push_file(config.wii-ip);
            update_config(config);
        }
    }

    msg_dialog := Dialog {
        width: root.width;
        height: root.height;
        title: dialog_msg.is-err ? "Error" : "Info";
        icon: dialog_msg.is-err ? @image-url("../mdi/alert.svg") : @image-url("../mdi/information.svg");
        default_action_text: "Close";

        default_action_clicked => {
            self.close();
        }

        MaterialText {
            width: self.preferred-width;
            text: dialog_msg.msg;
        }
    }

    public function show_error(msg: string) {
        if !msg.is-empty {
            dialog_msg.is-err = true;
            dialog_msg.msg = msg;
            msg_dialog.show();
        }
    }

    public function show_info(msg: string) {
        if !msg.is-empty {
            dialog_msg.is-err = false;
            dialog_msg.msg = msg;
            msg_dialog.show();
        }
    }

    remove_dir_dialog := Dialog {
        width: root.width;
        height: root.height;
        title: "Remove Directory?";
        icon: @image-url("../mdi/alert.svg");
        default_action_text: "Yes";
        actions: ["No"];

        default_action_clicked => {
            self.close();
            remove_dir(removing_dir);
            refresh(config.mount-point);
        }

        action_clicked(i) => {
            if i == 0 {
                self.close();
            }
        }

        MaterialText {
            width: self.preferred-width;

            vertical-alignment: center;
            horizontal-alignment: center;
            text: "Are you sure you want to remove " + removing_dir + "?";
        }
    }
}
