// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { ScrollView, Horizontal, Icon, MaterialPalette, MaterialText, HorizontalDivider, IconButton } from "@material";
import { LineEdit } from "std-widgets.slint";
import { Game, Config, Console, ArchiveFormat } from "common.slint";

export component GameList inherits ScrollView {
    in property <[Game]> games;
    in property <ArchiveFormat> archive_format;

    callback open_disc_info(Game);
    callback open_game_dir(Game);
    callback remove_game(Game);
    callback archive_game(Game);
    callback verify_game(Game);

    // Draw the horizontal separator lines
    for i in games.length - 1: HorizontalDivider {
        x: 8px;
        y: (4px + 18px + 4px) * (i + 1) + 3px;
        width: parent.width - 16px;
    }

    Horizontal {
        Rectangle {
            horizontal-stretch: 2;

            for game[i] in games: MaterialText {
                x: 0px;
                y: (4px + 18px + 4px) * i + 2px;
                text: game.display-title;
            }
        }

        Rectangle {
            horizontal-stretch: 1;

            for i in games.length: Icon {
                x: 0px;
                y: (4px + 18px + 4px) * i + 2px;
                height: 14px;
                width: 14px;
                source: @image-url("../mdi/tag.svg");
            }

            for game[i] in games: MaterialText {
                x: 14px + 4px;
                y: (4px + 18px + 4px) * i + 2px;
                text: game.id;
            }
        }

        Rectangle {
            horizontal-stretch: 1;

            for game[i] in games: Icon {
                x: 0px;
                y: (4px + 18px + 4px) * i + 2px;
                height: 14px;
                width: 14px;
                source: game.console == Console.GameCube ? @image-url("../mdi/cube-outline.svg") : @image-url("../mdi/tennis.svg");
            }

            for game[i] in games: MaterialText {
                x: 14px + 4px;
                y: (4px + 18px + 4px) * i + 2px;
                text: game.console == Console.GameCube ? "GC" : "Wii";
            }
        }

        Rectangle {
            horizontal-stretch: 1;

            for i in games.length: Icon {
                x: 0px;
                y: (4px + 18px + 4px) * i + 2px;
                height: 14px;
                width: 14px;
                source: @image-url("../mdi/scale.svg");
            }

            for game[i] in games: MaterialText {
                x: 14px + 4px;
                y: (4px + 18px + 4px) * i + 2px;
                text: game.size;
            }
        }

        // We draw bottom to top to preserve the tooltips
        Rectangle {
            horizontal-stretch: 1;
            width: 18px + 4px + 18px + 4px + 18px + 4px + 18px;

            for i in games.length: IconButton {
                x: 0px;
                y: (4px + 18px + 4px) * (games.length - i - 1);
                height: 18px;
                width: 18px;
                icon: @image-url("../mdi/information.svg");
                tooltip: "Disc Info";
                inline: true;
                clicked => {
                    open_disc_info(games[games.length - i - 1]);
                }
            }

            for i in games.length: IconButton {
                x: 18px + 4px;
                y: (4px + 18px + 4px) * (games.length - i - 1);
                height: 18px;
                width: 18px;
                icon: @image-url("../mdi/folder-open.svg");
                tooltip: "Open Game Directory";
                inline: true;
                clicked => {
                    open_game_dir(games[games.length - i - 1]);
                }
            }

            for i in games.length: IconButton {
                x: 18px + 4px + 18px + 4px;
                y: (4px + 18px + 4px) * (games.length - i - 1);
                height: 18px;
                width: 18px;
                icon: @image-url("../mdi/package-down.svg");
                tooltip: "Archive Game to " + (archive_format == ArchiveFormat.Rvz ? "RVZ" : "ISO");
                inline: true;
                clicked => {
                    archive_game(games[games.length - i - 1]);
                }
            }

            for i in games.length: IconButton {
                x: 18px + 4px + 18px + 4px + 18px + 4px;
                y: (4px + 18px + 4px) * (games.length - i - 1);
                height: 18px;
                width: 18px;
                icon: @image-url("../mdi/trash-can.svg");
                tooltip: "Remove Game";
                inline: true;
                clicked => {
                    remove_game(games[games.length - i - 1]);
                }
            }
        }
    }
}
