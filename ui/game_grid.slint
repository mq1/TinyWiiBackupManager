// SPDX-FileCopyrightText: 2025 Manuel Quarneti <mq1@ik.me>
// SPDX-License-Identifier: GPL-3.0-only

import { ScrollView, Icon, MaterialText, IconButton, MaterialPalette, HorizontalDivider } from "@material";
import { LineEdit } from "std-widgets.slint";
import { Game, Config, Console, ArchiveFormat } from "common.slint";

component GameCard inherits Rectangle {
    in property <Game> game;
    in property <ArchiveFormat> archive_format;

    callback open_disc_info();
    callback open_game_dir();
    callback remove_game();
    callback archive_game();
    callback verify_game();

    width: 166px;
    height: 16px + 14px + 8px + 96px + 8px + 14px + 16px + 1px + 4px + 18px + 8px;
    background: MaterialPalette.surface;
    border-color: MaterialPalette.outline_variant;
    border-radius: 12px;
    border-width: 1px;

    if game.console == Console.Wii: Icon {
        x: 16px;
        y: 16px;
        width: 14px;
        height: 14px;
        source: @image-url("../mdi/tennis.svg");
    }

    if game.console == Console.Wii: MaterialText {
        x: 16px + 14px + 4px;
        y: 16px;
        text: "Wii";
    }

    if game.console == Console.GameCube: Icon {
        x: 16px;
        y: 16px;
        width: 14px;
        height: 14px;
        source: @image-url("../mdi/cube-outline.svg");
    }

    if game.console == Console.GameCube: MaterialText {
        x: 16px + 14px + 4px;
        y: 16px;
        text: "GC";
    }

    MaterialText {
        x: parent.width - self.width - 16px;
        y: 16px;
        text: game.size;
    }

    Image {
        y: 16px + 14px + 8px;
        height: 96px;
        source: game.image;
    }

    MaterialText {
        x: 16px;
        y: 16px + 14px + 8px + 96px + 8px;
        width: parent.width - 32px;
        horizontal-alignment: center;
        text: game.display-title;
    }

    HorizontalDivider {
        x: 16px;
        y: 16px + 14px + 8px + 96px + 8px + 14px + 16px;
        width: parent.width - 32px;
    }

    Rectangle {
        y: 16px + 14px + 8px + 96px + 8px + 14px + 16px + 1px + 4px;
        x: parent.width / 2 - (18px + 4px + 18px + 4px + 18px + 4px + 18px) / 2;
        height: 18px;

        IconButton {
            x: 0px;
            icon: @image-url("../mdi/information.svg");
            tooltip: "Disc Info";
            inline: true;
            clicked => {
                open_disc_info();
            }
        }

        IconButton {
            x: 18px + 4px;
            icon: @image-url("../mdi/folder-open.svg");
            tooltip: "Open Game Directory";
            inline: true;
            clicked => {
                open_game_dir();
            }
        }

        IconButton {
            x: 18px + 4px + 18px + 4px;
            icon: @image-url("../mdi/package-down.svg");
            tooltip: "Archive Game to " + (archive_format == ArchiveFormat.Rvz ? "RVZ" : "ISO");
            inline: true;
            clicked => {
                archive_game();
            }
        }

        IconButton {
            x: 18px + 4px + 18px + 4px + 18px + 4px;
            icon: @image-url("../mdi/trash-can.svg");
            tooltip: "Delete Game";
            inline: true;
            clicked => {
                remove_game();
            }
        }
    }
}

export component GameGrid inherits ScrollView {
    in property <[Game]> games;
    in property <ArchiveFormat> archive_format;

    private property <int> cols: max(1, self.width / 180px);
    private property <int> rows: ceil(games.length / cols);
    viewport_height: 36px + rows * (16px + 14px + 8px + 96px + 8px + 14px + 16px + 1px + 4px + 18px + 8px + 8px);
    vertical_scrollbar_policy: ScrollBarPolicy.always-on;

    callback open_disc_info(Game);
    callback open_game_dir(Game);
    callback remove_game(Game);
    callback archive_game(Game);
    callback verify_game(Game);

    for i in games.length: GameCard {
        x: 16px + mod((games.length - 1 - i), cols) * 174px;
        y: 16px + floor((games.length - 1 - i) / cols) * (16px + 14px + 8px + 96px + 8px + 14px + 16px + 1px + 4px + 18px + 8px + 8px);

        game: games[games.length - 1 - i];
        archive_format: archive_format;
        open_disc_info => open_disc_info(games[games.length - 1 - i]);
        open_game_dir => open_game_dir(games[games.length - 1 - i]);
        remove_game => remove_game(games[games.length - 1 - i]);
        archive_game => archive_game(games[games.length - 1 - i]);
        verify_game => verify_game(games[games.length - 1 - i]);
    }
}
