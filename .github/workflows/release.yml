name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

# ==================================================================================
#  Concurrency: Ensures only one release workflow runs at a time for a given tag.
# ==================================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-22.04
          - arch: aarch64
            runner: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev \ # For eframe
            libfuse2 desktop-file-utils # For LinuxDeploy

          # Install LinuxDeploy
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${{ matrix.arch }}.AppImage"
          wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-${{ matrix.arch }}.AppImage"
          chmod +x linuxdeploy*.AppImage
          mkdir -p ~/.local/bin
          mv linuxdeploy*.AppImage ~/.local/bin

      - name: Run Linux build script
        run: ./scripts/build-linux.sh

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist-${{ matrix.arch }}
          path: dist/*

  build-windows:
    name: Build for Windows (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: windows-2022
          - arch: aarch64
            runner: windows-11-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PSToml module
        shell: pwsh
        run: Install-Module -Name PSToml -Scope CurrentUser -Repository PSGallery -Force

      - name: Run Windows build script
        shell: pwsh
        run: ./scripts/build-windows.ps1

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist-${{ matrix.arch }}
          path: dist/*

  build-macos:
    name: Build for MacOS (Universal2)
    runs-on: macos-14
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install graphicsmagick imagemagick

      - name: Install rustup targets
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Run MacOS build script
        run: ./scripts/build-macos.sh

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Download all distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version.txt
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The glob pattern now includes the new version.txt file
          files: |
            artifacts/*/*
            version.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}