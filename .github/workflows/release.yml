name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

# ==================================================================================
#  Concurrency: Ensures only one release workflow runs at a time for a given tag.
# ==================================================================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  #  Build & Bundle Jobs: Run the platform-specific build scripts.
  #  The icon assets are checked in with the repository.
  # ==================================================================================
  build-linux:
    name: Build for Linux (x86_64 & aarch64)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu

      - name: Set up mold
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Install dependencies
        run: |
          sudo apt-get update

          # Install dependencies for aarch64, eframe and appimage
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev \
            squashfs-tools

          # Install cargo-bundle
          cargo install cargo-bundle

      - name: Create mksquashfs wrapper for zstd compression
        run: |
          sudo mv /usr/bin/mksquashfs /usr/bin/mksquashfs.original
          
          sudo tee /usr/bin/mksquashfs > /dev/null <<'EOF'
          #!/bin/bash
          
          # Find the first option and insert -comp zstd before it
          args=("$@")
          
          for ((i=0; i<${#args[@]}; i++)); do
            if [[ "${args[i]}" == -* ]]; then
              exec /usr/bin/mksquashfs.original "${args[@]:0:i}" -comp zstd "${args[@]:i}"
            fi
          done
          EOF
          
          sudo chmod +x /usr/bin/mksquashfs

      - name: Build binaries in parallel
        run: |
          cargo bundle --release --target x86_64-unknown-linux-gnu --format appimage &
          cargo bundle --release --target aarch64-unknown-linux-gnu --format appimage &
          wait

      - name: Package for Linux (x86_64 and aarch64)
        run: |
          mkdir dist

          mv target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage dist/TWBM-${{ github.ref_name }}-Linux-x86_64.AppImage
          mv target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage dist/TWBM-${{ github.ref_name }}-Linux-aarch64.AppImage

          # Also create tarballs with plain binaries
          mv target/x86_64-unknown-linux-gnu/release/tiny-wii-backup-manager TWBM-${{ github.ref_name }}-Linux-x86_64
          mv target/aarch64-unknown-linux-gnu/release/tiny-wii-backup-manager TWBM-${{ github.ref_name }}-Linux-aarch64
          tar -czf dist/TWBM-${{ github.ref_name }}-Linux-x86_64.tar.gz TWBM-${{ github.ref_name }}-Linux-x86_64
          tar -czf dist/TWBM-${{ github.ref_name }}-Linux-aarch64.tar.gz TWBM-${{ github.ref_name }}-Linux-aarch64

      - name: Upload Linux distributables
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/*

  build-windows:
    name: Build for Windows (x86_64 & aarch64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc

      - name: Build binaries in parallel
        shell: bash
        run: |
          cargo build --release --target x86_64-pc-windows-msvc &
          cargo build --release --target aarch64-pc-windows-msvc &
          wait

      - name: Package for Windows (x86_64 and aarch64)
        run: |
          New-Item -ItemType Directory -Path dist
          Move-Item -Path target/x86_64-pc-windows-msvc/release/tiny-wii-backup-manager.exe -Destination TWBM-${{ github.ref_name }}-Windows-x86_64.exe
          Move-Item -Path target/aarch64-pc-windows-msvc/release/tiny-wii-backup-manager.exe -Destination TWBM-${{ github.ref_name }}-Windows-aarch64.exe
          Compress-Archive -Path TWBM-${{ github.ref_name }}-Windows-x86_64.exe -DestinationPath dist/TWBM-${{ github.ref_name }}-Windows-x86_64.zip
          Compress-Archive -Path TWBM-${{ github.ref_name }}-Windows-aarch64.exe -DestinationPath dist/TWBM-${{ github.ref_name }}-Windows-aarch64.zip

      - name: Upload Windows distributables
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/*

  build-macos:
    name: Build for MacOS (Universal2)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Install dependencies
        run: |
          brew install graphicsmagick imagemagick
          cargo install cargo-bundle

      - name: Build binaries in parallel
        run: |
          cargo bundle --release --target aarch64-apple-darwin --format osx &
          cargo build --release --target x86_64-apple-darwin &
          wait

      - name: Package for MacOS (Universal2)
        run: |
          mkdir dist

          lipo \
            -create \
            -output target/aarch64-apple-darwin/release/bundle/osx/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            target/aarch64-apple-darwin/release/bundle/osx/TinyWiiBackupManager.app/Contents/MacOS/tiny-wii-backup-manager \
            target/x86_64-apple-darwin/release/tiny-wii-backup-manager
          
          npx --yes create-dmg target/aarch64-apple-darwin/release/bundle/osx/TinyWiiBackupManager.app . || true
          mv *.dmg dist/TWBM-${{ github.ref_name }}-MacOS-Universal2.dmg

      - name: Upload MacOS distributable
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  # ==================================================================================
  #  Release Job: Collects all artifacts and creates a single GitHub Release.
  # ==================================================================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, build-macos ]
    steps:
      - name: Download all distributables
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version.txt
        run: echo -n "${GITHUB_REF_NAME#v}" > version.txt
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            version.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}